/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { AsyncSubject } from 'rxjs';
import { Highcharts } from './highcharts';
export class Chart {
    /**
     * @param {?=} options
     */
    constructor(options = { series: [] }) {
        this.options = options;
        this.refSubject = new AsyncSubject();
        this.ref$ = this.refSubject.asObservable();
    }
    /**
     * Add Point
     * @param {?} point         Highcharts.DataPoint, number touple or number
     * @param {?=} serieIndex    Index position of series. This defaults to 0.
     * @param {?=} redraw        Flag whether or not to redraw point. This defaults to true.
     * @param {?=} shift         Shift point to the start of series. This defaults to false.
     * @return {?}
     */
    addPoint(point, serieIndex = 0, redraw = true, shift = false) {
        this.ref$.subscribe(chart => {
            if (chart.series.length > serieIndex) {
                chart.series[serieIndex].addPoint(point, redraw, shift);
            }
        });
    }
    /**
     * Add Series
     * @param {?} series         Series Configuration
     * @param {?=} redraw        Flag whether or not to redraw series. This defaults to true.
     * @param {?=} animation     Whether to apply animation, and optionally animation configuration. This defaults to false.
     * @return {?}
     */
    addSeries(series, redraw = true, animation = false) {
        this.ref$.subscribe(chart => {
            chart.addSeries(series, redraw, animation);
        });
    }
    /**
     * Remove Point
     * @param {?} pointIndex    Index of Point
     * @param {?=} serieIndex    Specified Index of Series. Defaults to 0.
     * @return {?}
     */
    removePoint(pointIndex, serieIndex = 0) {
        this.ref$.subscribe(chart => {
            if (chart.series.length > serieIndex && chart.series[serieIndex].data.length > pointIndex) {
                chart.series[serieIndex].removePoint(pointIndex, true);
            }
        });
    }
    /**
     * Remove Series
     * @param {?} seriesIndex    Index position of series to remove.
     * @return {?}
     */
    removeSeries(seriesIndex) {
        this.ref$.subscribe(chart => {
            if (chart.series.length > seriesIndex) {
                chart.series[seriesIndex].remove(true);
            }
        });
    }
    /**
     * @param {?} el
     * @return {?}
     */
    init(el) {
        Highcharts.chart(el.nativeElement, this.options, chart => {
            this.refSubject.next(chart);
            this.ref = chart;
            this.refSubject.complete();
        });
    }
    /**
     * @return {?}
     */
    destroy() {
        if (this.ref) {
            this.options = this.ref.options;
            this.ref.destroy();
            this.ref = undefined;
            // new init subject
            this.refSubject = new AsyncSubject();
            this.ref$ = this.refSubject.asObservable();
        }
    }
}
if (false) {
    /** @type {?} */
    Chart.prototype.refSubject;
    /** @type {?} */
    Chart.prototype.ref$;
    /** @type {?} */
    Chart.prototype.ref;
    /** @type {?} */
    Chart.prototype.options;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWhpZ2hjaGFydHMvIiwic291cmNlcyI6WyJsaWIvY2hhcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDaEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQWMxQyxNQUFNLE9BQU8sS0FBSzs7OztJQUtoQixZQUFvQixVQUE4QixFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUU7UUFBNUMsWUFBTyxHQUFQLE9BQU8sQ0FBcUM7UUFKeEQsZUFBVSxHQUF5QyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzlFLFNBQUksR0FBdUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUdQLENBQUM7Ozs7Ozs7OztJQVNwRSxRQUFRLENBQUMsS0FBWSxFQUFFLGFBQXFCLENBQUMsRUFBRSxTQUFrQixJQUFJLEVBQUUsUUFBaUIsS0FBSztRQUMzRixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMxQixJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLFVBQVUsRUFBRTtnQkFDcEMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQzthQUN6RDtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7Ozs7SUFRRCxTQUFTLENBQ1AsTUFBZ0MsRUFDaEMsTUFBTSxHQUFHLElBQUksRUFDYixZQUE0QyxLQUFLO1FBRWpELElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzFCLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUM3QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7Ozs7SUFPRCxXQUFXLENBQUMsVUFBa0IsRUFBRSxVQUFVLEdBQUcsQ0FBQztRQUM1QyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMxQixJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLFVBQVUsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsVUFBVSxFQUFFO2dCQUN6RixLQUFLLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDeEQ7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7OztJQU1ELFlBQVksQ0FBQyxXQUFtQjtRQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMxQixJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLFdBQVcsRUFBRTtnQkFDckMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDeEM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBRUQsSUFBSSxDQUFDLEVBQWM7UUFDakIsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLEVBQUU7WUFDdkQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDNUIsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7WUFDakIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM3QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7SUFFRCxPQUFPO1FBQ0wsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1osSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQztZQUNoQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ25CLElBQUksQ0FBQyxHQUFHLEdBQUcsU0FBUyxDQUFDO1lBRXJCLG1CQUFtQjtZQUNuQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7WUFDckMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQzVDO0lBQ0gsQ0FBQztDQUNGOzs7SUFqRkMsMkJBQThFOztJQUM5RSxxQkFBMEU7O0lBQzFFLG9CQUE0Qjs7SUFFaEIsd0JBQW9EIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXN5bmNTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBIaWdoY2hhcnRzIH0gZnJvbSAnLi9oaWdoY2hhcnRzJztcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEZlbGl4IEl0emVucGxpdHouIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXRcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jZWJvci9hbmd1bGFyLWhpZ2hjaGFydHMvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogQGF1dGhvciBGZWxpeCBJdHplbnBsaXR6XG4gKiBAYXV0aG9yIFRpbW90aHkgQS4gUGVyZXogKGNvbnRyaWJ1dG9yKVxuICovXG5leHBvcnQgdHlwZSBQb2ludCA9IG51bWJlciB8IFtudW1iZXIsIG51bWJlcl0gfCBIaWdoY2hhcnRzLkRhdGFQb2ludDtcblxuZXhwb3J0IGNsYXNzIENoYXJ0IHtcbiAgcHJpdmF0ZSByZWZTdWJqZWN0OiBBc3luY1N1YmplY3Q8SGlnaGNoYXJ0cy5DaGFydE9iamVjdD4gPSBuZXcgQXN5bmNTdWJqZWN0KCk7XG4gIHJlZiQ6IE9ic2VydmFibGU8SGlnaGNoYXJ0cy5DaGFydE9iamVjdD4gPSB0aGlzLnJlZlN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gIHJlZjogSGlnaGNoYXJ0cy5DaGFydE9iamVjdDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG9wdGlvbnM6IEhpZ2hjaGFydHMuT3B0aW9ucyA9IHsgc2VyaWVzOiBbXSB9KSB7fVxuXG4gIC8qKlxuICAgKiBBZGQgUG9pbnRcbiAgICogQHBhcmFtIHBvaW50ICAgICAgICAgSGlnaGNoYXJ0cy5EYXRhUG9pbnQsIG51bWJlciB0b3VwbGUgb3IgbnVtYmVyXG4gICAqIEBwYXJhbSBzZXJpZUluZGV4ICAgIEluZGV4IHBvc2l0aW9uIG9mIHNlcmllcy4gVGhpcyBkZWZhdWx0cyB0byAwLlxuICAgKiBAcGFyYW0gcmVkcmF3ICAgICAgICBGbGFnIHdoZXRoZXIgb3Igbm90IHRvIHJlZHJhdyBwb2ludC4gVGhpcyBkZWZhdWx0cyB0byB0cnVlLlxuICAgKiBAcGFyYW0gc2hpZnQgICAgICAgICBTaGlmdCBwb2ludCB0byB0aGUgc3RhcnQgb2Ygc2VyaWVzLiBUaGlzIGRlZmF1bHRzIHRvIGZhbHNlLlxuICAgKi9cbiAgYWRkUG9pbnQocG9pbnQ6IFBvaW50LCBzZXJpZUluZGV4OiBudW1iZXIgPSAwLCByZWRyYXc6IGJvb2xlYW4gPSB0cnVlLCBzaGlmdDogYm9vbGVhbiA9IGZhbHNlKTogdm9pZCB7XG4gICAgdGhpcy5yZWYkLnN1YnNjcmliZShjaGFydCA9PiB7XG4gICAgICBpZiAoY2hhcnQuc2VyaWVzLmxlbmd0aCA+IHNlcmllSW5kZXgpIHtcbiAgICAgICAgY2hhcnQuc2VyaWVzW3NlcmllSW5kZXhdLmFkZFBvaW50KHBvaW50LCByZWRyYXcsIHNoaWZ0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgU2VyaWVzXG4gICAqIEBwYXJhbSBzZXJpZXMgICAgICAgICBTZXJpZXMgQ29uZmlndXJhdGlvblxuICAgKiBAcGFyYW0gcmVkcmF3ICAgICAgICBGbGFnIHdoZXRoZXIgb3Igbm90IHRvIHJlZHJhdyBzZXJpZXMuIFRoaXMgZGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICogQHBhcmFtIGFuaW1hdGlvbiAgICAgV2hldGhlciB0byBhcHBseSBhbmltYXRpb24sIGFuZCBvcHRpb25hbGx5IGFuaW1hdGlvbiBjb25maWd1cmF0aW9uLiBUaGlzIGRlZmF1bHRzIHRvIGZhbHNlLlxuICAgKi9cbiAgYWRkU2VyaWVzKFxuICAgIHNlcmllczogSGlnaGNoYXJ0cy5TZXJpZXNPcHRpb25zLFxuICAgIHJlZHJhdyA9IHRydWUsXG4gICAgYW5pbWF0aW9uOiBib29sZWFuIHwgSGlnaGNoYXJ0cy5BbmltYXRpb24gPSBmYWxzZVxuICApOiB2b2lkIHtcbiAgICB0aGlzLnJlZiQuc3Vic2NyaWJlKGNoYXJ0ID0+IHtcbiAgICAgIGNoYXJ0LmFkZFNlcmllcyhzZXJpZXMsIHJlZHJhdywgYW5pbWF0aW9uKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgUG9pbnRcbiAgICogQHBhcmFtIHBvaW50SW5kZXggICAgSW5kZXggb2YgUG9pbnRcbiAgICogQHBhcmFtIHNlcmllSW5kZXggICAgU3BlY2lmaWVkIEluZGV4IG9mIFNlcmllcy4gRGVmYXVsdHMgdG8gMC5cbiAgICovXG4gIHJlbW92ZVBvaW50KHBvaW50SW5kZXg6IG51bWJlciwgc2VyaWVJbmRleCA9IDApOiB2b2lkIHtcbiAgICB0aGlzLnJlZiQuc3Vic2NyaWJlKGNoYXJ0ID0+IHtcbiAgICAgIGlmIChjaGFydC5zZXJpZXMubGVuZ3RoID4gc2VyaWVJbmRleCAmJiBjaGFydC5zZXJpZXNbc2VyaWVJbmRleF0uZGF0YS5sZW5ndGggPiBwb2ludEluZGV4KSB7XG4gICAgICAgIGNoYXJ0LnNlcmllc1tzZXJpZUluZGV4XS5yZW1vdmVQb2ludChwb2ludEluZGV4LCB0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgU2VyaWVzXG4gICAqIEBwYXJhbSBzZXJpZXNJbmRleCAgICBJbmRleCBwb3NpdGlvbiBvZiBzZXJpZXMgdG8gcmVtb3ZlLlxuICAgKi9cbiAgcmVtb3ZlU2VyaWVzKHNlcmllc0luZGV4OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnJlZiQuc3Vic2NyaWJlKGNoYXJ0ID0+IHtcbiAgICAgIGlmIChjaGFydC5zZXJpZXMubGVuZ3RoID4gc2VyaWVzSW5kZXgpIHtcbiAgICAgICAgY2hhcnQuc2VyaWVzW3Nlcmllc0luZGV4XS5yZW1vdmUodHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpbml0KGVsOiBFbGVtZW50UmVmKTogdm9pZCB7XG4gICAgSGlnaGNoYXJ0cy5jaGFydChlbC5uYXRpdmVFbGVtZW50LCB0aGlzLm9wdGlvbnMsIGNoYXJ0ID0+IHtcbiAgICAgIHRoaXMucmVmU3ViamVjdC5uZXh0KGNoYXJ0KTtcbiAgICAgIHRoaXMucmVmID0gY2hhcnQ7XG4gICAgICB0aGlzLnJlZlN1YmplY3QuY29tcGxldGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMucmVmKSB7XG4gICAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLnJlZi5vcHRpb25zO1xuICAgICAgdGhpcy5yZWYuZGVzdHJveSgpO1xuICAgICAgdGhpcy5yZWYgPSB1bmRlZmluZWQ7XG5cbiAgICAgIC8vIG5ldyBpbml0IHN1YmplY3RcbiAgICAgIHRoaXMucmVmU3ViamVjdCA9IG5ldyBBc3luY1N1YmplY3QoKTtcbiAgICAgIHRoaXMucmVmJCA9IHRoaXMucmVmU3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==